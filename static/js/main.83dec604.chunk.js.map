{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["softShadows","SpinningMesh","position","args","color","mesh","speed","useRef","useFrame","current","rotation","x","y","useState","expand","setExpand","props","useSpring","scale","onClick","castShadow","ref","attach","factor","App","className","shadowMap","colorManagement","camera","fov","intensity","shadow-mapSize-width","shadow-mapSize-height","shadow-camera-far","shadow-camera-left","shadow-camera-right","shadow-camera-top","shadow-camera-bottom","receiveShadow","Math","PI","opacity","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QAOAA,cAGA,IAAMC,EAAe,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,MAChCC,GADmD,EAAZC,MAChCC,iBAAO,OACpBC,aAAS,kBAAOH,EAAKI,QAAQC,SAASC,EAAIN,EAAKI,QAAQC,SAASE,GAAK,OAFZ,MAI7BC,oBAAS,GAJoB,mBAIlDC,EAJkD,KAI1CC,EAJ0C,KAKnDC,EAAQC,YAAU,CACtBC,MAAOJ,EAAS,CAAC,IAAK,IAAK,KAAO,CAAC,EAAG,EAAG,KAE3C,OACE,eAAC,IAAET,KAAH,CAAQc,QAAS,kBAAMJ,GAAWD,IAChCI,MAAOF,EAAME,MAAOE,YAAU,EAAClB,SAAUA,EAAUmB,IAAKhB,EAD1D,UAEE,mCAAmBiB,OAAO,WAAWnB,KAAMA,IAC3C,cAAC,IAAD,CAAoBG,MAAO,EAAGiB,OAAQ,GAAKD,OAAO,WAAWlB,MAAOA,QAwC3DoB,MApCf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,eAAC,IAAD,CAAQC,WAAS,EAACC,iBAAe,EAACC,OAAQ,CAAE1B,SAAU,EAAE,GAAI,EAAG,IAAK2B,IAAK,IAAzE,UACE,8BAAcC,UAAW,KACzB,kCACEV,YAAU,EACVlB,SAAU,CAAC,EAAG,GAAI,GAClB4B,UAAW,KACXC,uBAAsB,KACtBC,wBAAuB,KACvBC,oBAAmB,GACnBC,sBAAqB,GACrBC,sBAAqB,GACrBC,oBAAmB,GACnBC,wBAAuB,KAEzB,4BAAYnC,SAAU,EAAE,GAAI,GAAI,IAAK4B,UAAW,KAChD,4BAAY5B,SAAU,CAAC,GAAI,GAAI,GAAI4B,UAAW,KAE9C,gCACE,uBAAMQ,eAAa,EAAC5B,SAAU,EAAE6B,KAAKC,GAAK,EAAG,EAAG,GAAItC,SAAU,CAAC,GAAI,EAAG,GAAtE,UACE,qCAAqBoB,OAAO,WAAWnB,KAAM,CAAC,IAAK,OACnD,gCAAgBmB,OAAO,WAAWmB,QAAS,UAI/C,cAAC,EAAD,CAAcnC,MAAO,EAAGJ,SAAU,CAAC,EAAG,EAAG,GAAIC,KAAM,CAAC,EAAG,EAAG,GAAIC,MAAM,WACpE,cAAC,EAAD,CAAcE,MAAO,EAAGJ,SAAU,CAAC,EAAG,GAAI,GAAIC,KAAM,CAAC,EAAG,EAAG,GAAIC,MAAM,cACrE,cAAC,EAAD,CAAcE,MAAO,EAAGJ,SAAU,CAAC,EAAG,EAAG,GAAIC,KAAM,CAAC,EAAG,EAAG,GAAIC,MAAM,SACpE,cAAC,IAAD,UC5COsC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.83dec604.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport './App.scss';\n\nimport { Canvas, useFrame } from 'react-three-fiber';\n\nimport { softShadows, MeshWobbleMaterial, OrbitControls } from \"drei\";\nimport { useSpring, a } from \"react-spring/three\";\nsoftShadows();\n\n\nconst SpinningMesh = ({ position, args, color, speed }) => {\n  const mesh = useRef(null);\n  useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01));\n\n  const [expand, setExpand] = useState(false);\n  const props = useSpring({\n    scale: expand ? [1.4, 1.4, 1.4] : [1, 1, 1],\n  });\n  return (\n    <a.mesh onClick={() => setExpand(!expand)}\n      scale={props.scale} castShadow position={position} ref={mesh}>\n      <boxBufferGeometry attach='geometry' args={args} />\n      <MeshWobbleMaterial speed={1} factor={0.4} attach='material' color={color} />\n    </a.mesh>\n  )\n}\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Canvas shadowMap colorManagement camera={{ position: [-15, 2, 10], fov: 75 }}>\n        <ambientLight intensity={0.3}></ambientLight>\n        <directionalLight\n          castShadow\n          position={[0, 10, 0]}\n          intensity={1.15}\n          shadow-mapSize-width={1024}\n          shadow-mapSize-height={1024}\n          shadow-camera-far={50}\n          shadow-camera-left={-10}\n          shadow-camera-right={10}\n          shadow-camera-top={10}\n          shadow-camera-bottom={-10}\n        />\n        <pointLight position={[-10, 0, -20]} intensity={0.5}></pointLight>\n        <pointLight position={[0, -10, 0]} intensity={0.5}></pointLight>\n\n        <group>\n          <mesh receiveShadow rotation={[-Math.PI / 2, 0, 0]} position={[0, -3, 0]} >\n            <planeBufferGeometry attach='geometry' args={[100, 100]} />\n            <shadowMaterial attach='material' opacity={0.4} />\n          </mesh>\n        </group>\n\n        <SpinningMesh speed={4} position={[3, 2, 2]} args={[2, 2, 1]} color='orange'></SpinningMesh>\n        <SpinningMesh speed={6} position={[5, 6, -3]} args={[4, 2, 1]} color='lightblue'></SpinningMesh>\n        <SpinningMesh speed={2} position={[7, 6, 7]} args={[2, 4, 1]} color='pink'></SpinningMesh>\n        <OrbitControls />\n      </Canvas>\n    </div >\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}